import openai
import re

# Initialize the OpenAI API key
openai.api_key = "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"

# generate_journals = '''
#             generate a sample bullet journal entry for a female college student at UC Berkeley
#             named Keerthana interested in generative AI who loves to go to hackathons,
#             hackerhouses, and conferences, and also loves to explore nature around Berkeley
#             and San Francisco. The journal entry should be written in first person point of view.
#             Make sure to format the journal entry is as follows:
#
#             Characters: list the characters clearly at the beginning of the journal
#             entry
#             Events: include briefly summarized dialogues Keerthana has had with others and
#             with herself (internal thoughts).
#         '''
# # Prompt GPT-3
# response = openai.Completion.create(
#     engine="text-davinci-002",
#     prompt=generate_journals,
#     max_tokens=1024,
#     n=1,
#     stop=None,
#     temperature=0.5,
# )
# # Extract the response text
# events_input = response.choices[0].text.strip()
# print("Input generated jounral entry is", events_input)


def split_by_keyword(text, keyword):
    result = []
    start = 0
    while True:
        index = text.find(keyword, start)
        if index == -1:
            result.append(text[start:])
            break
        result.append(text[start:index + len(keyword) + 3])
        start = index + len(keyword)
    return result

def call_gpt():
    events_input = '''\n\n
    Characters: Myself, Emily my best friend, Alex & Stella both from Meta Climate AI

    Events:
    1. on saturday, I went to a hackathon in a mansion, told myself "wow im finally here!"
    2. i met a super cool guy and girl both from the climate Meta team and talked to them first
    near the open layout kitchen then again on a couch in the main hacking room with Emily this
    time. we talked about restructuring ads on meta to display more sustainable ads first.
    then we talked about how h&m got sued (by climate activists ironically) for claiming more
    sustainable products so they don't claim anymore in marketing but if meta could show more
    sustainable ads generate money h&m would go back to emphasizing sustainable ads
    3. listened to a conversation outside the mansion looking at the garden watching a person
    meditate near the pool and thought to myself how i would want to give my kids a peaceful
    safe green space to grow up like this house
    4. volunteered at shack15 at the front desk checking hackers in. emily and i talked about
    how people ignore us because we look like young girls
    5. emily and i went on the ferry to sausalito watching the sf skyline, then the golden gate
    bridge, then approached sausalito. Emily said sausalito shore looked like something from the
     hobbit. we hiked up a path in sausalito fron the shore line. there was a church with a
     bench that i felt very present in with the warm sun and clear air. i wanted to meditate
     their with emily for hours and pray for Emily to have an incredible 20th year of life. '''
    # Define the input chunk of text
    # events_input = "A man walks into a bar. He orders a drink and strikes up a conversation with the bartender. Suddenly, the door bursts open and two masked men enter, brandishing guns."

    # Set the prompt
    # prompt = "Create sample graphic novel dialogue. Make sure to segment the dialogue by labeling in the following format: \"Panel X:\". Also always label which character is speaking. The dialogue should be based on these events: \n Events:" + events_input
    prompt = "generate a sample graphic novel dialogue for the following events. It is ok to have major chunks of text when I (the main character is talking to myself) " + events_input
    # Prompt GPT-3
    response = openai.Completion.create(
        engine="davinci",
        prompt=prompt,
        max_tokens=1024,
        n=1,
        stop=None,
        temperature=0.7,
    )

    # Extract the response text
    output = response.choices[0].text.strip()
    print(output)
    #
    # panels = split_by_keyword(output, "Panel")
    #
    #
    # # the panels generated by gpt3
    # print("the panels generated by gpt3 \n", panels)
    #
    # # # Find the number of panels
    # # max_panel = len(re.findall(r"Panel [0-9]+", panels))
    #
    # # the number of panels gpt generated
    # # print("the number of panels gpt generated \n", max_panel)
    # # panels =
    #
    # # Initialize an array to store the prompts for each panel
    # mj_prompts = []
    #
    # # Iterate over each panel
    # for panel in panels:
    #     # Set the prompt for the current panel
    #     panel_prompt = "turn the following information into a descriptive text-to-image prompt: "  + panel
    #
    #     # Prompt GPT-3 for the current panel
    #     response = openai.Completion.create(
    #         engine="davinci",
    #         prompt=panel_prompt,
    #         max_tokens=1024,
    #         n=1,
    #         stop=None,
    #         temperature=0.7,
    #     )
    #
    #     # Extract the response text
    #     panel_description = response.choices[0].text.strip()
    #
    #     #log the response text
    #     print("for panel\n", panel, "\nthe description is\n", panel_description)
    #
    #     # Append the response to the mj_prompts array
    #     mj_prompts.append(panel_description)
    #
    # # Print the mj_prompts array
    # print(mj_prompts)
call_gpt()
